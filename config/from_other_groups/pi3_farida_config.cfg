#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray', 'tasklogic']

    serveraddress: localhost
    serverport: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    nidaqcounter: #CounterTrace, Scanner, ODMR
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        photon_sources:
        - '/Dev1/PFI3'
        clock_channel: '/Dev2/Ctr1'
        default_clock_frequency:
        - 100
        counter_channels:
        - '/Dev2/Ctr0'
        counter_ai_channels: ''
        default_scanner_clock_frequency:
        - 100
        scanner_clock_channel: '/Dev1/Ctr1'
        odmr_trigger_channel: '/Dev2/PFI12'
        laser_ao: '/Dev1/ao3'
        counting_edge_rising: True
        gate_in_channel:
        - '/Dev1/PFI13'
        scanner_counter_channels:
        - '/Dev1/Ctr0'
        default_samples_number:
        - 50
        scanner_ao_channels:
        - '/Dev1/ao0'
        - '/Dev1/ao1'
        - '/Dev1/ao2'
        scanner_ai_channels: []
        scanner_voltage_ranges:
        - [0, 10]
        - [0, 10]
        - [0, 10]
        scanner_position_ranges:
        - [0e-6, 50e-6]
        - [0e-6, 50e-6]
        - [-25e-6, 25e-6]

    mykrowave:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        gpib_address: 'GPIB0::29::INSTR'
        gpib_timeout: 60

    SMC_controller:
        module.Class: 'magnet.SMC_controller.SMC'

    AWG5014C:
        module.Class: 'awg.tektronix_awg5014c.AWG5014C'
        gpib_address: 'GPIB0::20::INSTR'
        _timeout: 30
        awg_IP_address: '129.69.46.166'
        ftp_login: 'user'
        ftp_passwd: 'pass'
        awg_port: 4001
        default_sample_rate: 1.2
        ftp_root_dir: 'C:\\inetpub\\ftproot'
        pulsed_file_dir: 'C:\\Users\\pi3\\Documents\\GitHub\\qudi\\pulsed_files'

    fastcounter:
        module.Class: 'fastcomtec.fastcomtecp7887.FastComtec'

    mydummyswitch1:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    mydummyswitch2:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    laserdummy:
        module.Class: 'laser.simple_laser_dummy.SimpleLaserDummy'

logic:
    simpledatalogic:
        module.Class: 'simple_data_logic.SimpleDataLogic'
        connect:
            simpledata: 'simpledatadummy'

    softpid:
        module.Class: 'software_pid_controller.SoftPIDController'
        connect:
            process: 'processdummy'
            control: 'processdummy'

    pidlogic:
        module.Class: 'pid_logic.PIDLogic'
        connect:
            controller: 'softpid'
            savelogic: 'savelogic'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    pulsedmasterlogic:
        module.Class: 'pulsed_master_logic.PulsedMasterLogic'
        direct_write: False
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'sequence_generator_logic.SequenceGeneratorLogic'
        pulsed_file_dir: 'C:\\Users\\pi3\\Documents\\GitHub\\qudi\\pulsed_files'
        #overhead_bytes: 4294967296  Not properly implemented yet
        #additional_methods_dir: 'C:\\Custom_dir\\Methods' optional

    pulseextractionlogic:
        module.Class: 'pulse_extraction_logic.PulseExtractionLogic'

    pulseanalysislogic:
        module.Class: 'pulse_analysis_logic.PulseAnalysisLogic'

    pulsedmeasurementlogic:
        module.Class: 'pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fastcounter: 'fastcounter'
            pulseanalysislogic: 'pulseanalysislogic'
            pulseextractionlogic: 'pulseextractionlogic'
            pulsegenerator: 'AWG5014C'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'mykrowave'

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'nidaqcounter'
            savelogic: 'savelogic'

    gatedcounterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mydummycounter'
            savelogic: 'savelogic'

    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch1: 'mydummyswitch1'
            switch2: 'mydummyswitch2'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'nidaqcounter'
            savelogic: 'savelogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'nidaqcounter'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimizer1: 'optimizerlogic'
            savelogic: 'savelogic'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        scanmode: 'LIST'
        connect:
            odmrcounter: 'nidaqcounter'
            fitlogic: 'fitlogic'
            microwave1: 'mykrowave'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
            pulsegenerator: 'AWG5014C'

    laserscanner:
        module.Class: 'laser_scanner_logic.LaserScannerLogic'
        connect:
            confocalscanner1: 'nidaqcounter'
            savelogic: 'save'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]

    automationlogic:
        module.Class: 'automation.AutomationLogic'
        connect:
            taskrunner: 'tasklogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'G:\\data\\QudiData'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True

    magnet_control_logic:
        module.Class: 'magnet_control_logic.MagnetControlLogic'
        connect:
            counter: 'counterlogic'
            magnetstage: 'SMC_controller'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'gatedcounterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    qdplotlogic:
        module.Class: 'qdplot_logic.QdplotLogic'
        connect:
            savelogic: 'savelogic'

    nuopslogic:
        module.Class: 'nuclear_operations_logic.NuclearOperationsLogic'
        connect:
            sequencegenerationlogic: 'sequencegeneratorlogic'
            traceanalysislogic: 'trace_analysis_logic'
            gatedcounterlogic: 'gatedcounterlogic'
            odmrlogic: 'odmrlogic'
            optimizerlogic: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
            savelogic: 'savelogic'

    pulsedextractionexternallogic:
        module.Class: 'pulsed_extraction_external_logic.PulsedExtractionExternalLogic'
        connect:
            savelogic: 'savelogic'
            pulseextractionlogic: 'pulseextractionlogic'
            pulseanalysislogic: 'pulseanalysislogic'

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    magnet:
        module.Class: 'magnet.Magnet_control.magnet_control_gui.MagnetControlGui'
        connect:
            magnetlogic1: 'magnet_control_logic'
            savelogic: 'savelogic'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'

    calculator:
        module.Class: 'magnetic_field_calculator.mf_calculator.CalculatorGui'

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanagerlogic'
            confocallogic1: 'scannerlogic'

    nv_depth_calculator:
        module.Class: 'analysis_methods.NV_depth_calculator.NVdepthGui'
        connect:
            savelogic: 'savelogic'

    noise_spectrum_calculator:
        module.Class: 'analysis_methods.noise_spectrum.NoiseSpectrumGui'
        connect:
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    taskrunner:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'
            savelogic: 'savelogic'

    pidcontrol:
        module.Class: 'pidgui.pidgui.PIDGui'
        connect:
            pidlogic: 'pidlogic'

    errortest:
        module.Class: 'testgui.TestGui'
        text: 'Random text from config'
        error: 'This config is required!'

    qdplotter:
        module.Class: 'qdplotter.qdplottergui.QdplotterGui'
        connect:
            qdplotlogic1: 'qdplotlogic'

    nuclearops:
        module.Class: 'nuclear_operations.nuclear_operations.NuclearOperationsGui'
        connect:
            nuclearoperationslogic: 'nuopslogic'
