#  Example QuDi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray', 'tasklogic']
    serveraddress: localhost
    remoteport: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:


#    simplelaserdummy:
 #       module.Class: 'simple_laser_dummy.SimpleLaserDummy'

#    simpledatadummy:
 #       module.Class: 'simple_data_dummy.SimpleDummy'

#    mykrowave:
 #       module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
  #      gpib_address: 'dummy'
   #     gpib_timeout: 20
    #    mock: True

    smiq:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        gpib_address: 'GPIB0::28::INSTR'
        gpib_timeout: 20

#    mydummyscanner:
 #       module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
  #      clock_frequency: 100
   #     connect:
    #        fitlogic: 'fitlogic.fitlogic'

    nicard:
        module.Class: 'ni_card.NICard'
        clock_channel: '/Dev1/Ctr1'             # clock and counters are chosen
                                                # internally, so actual pin-ins
                                                #dont't need to be specified as long as their not identical with the other channels
        counter_channel: '/Dev1/Ctr0'
        scanner_clock_channel: '/Dev1/Ctr2'
        scanner_counter_channel: '/Dev1/Ctr3'
        photon_source: '/Dev1/PFI8'
        gate_in_channel: '/Dev1/PFI9'
        counting_edge_rising: True
        scanner_x_ao: '/Dev1/AO0'
        scanner_y_ao: '/Dev1/AO1'
        scanner_z_ao: '/Dev1/AO2'
        clock_frequency: 100    # in Hz
        scanner_clock_frequency: 100 # in Hz; independant of clock_frequency
        x_range:
        - 0
        - 200e-6   # in meters
        y_range:
        - 0
        - 200e-6   # in meters
        z_range:
        - -12.5e-6   # in meters
        - 12.5e-6   # in meters
        voltage_range:
        - -10
        - 10
        odmr_trigger_channel: '/Dev1/PFI15'


    myawg:
        module.Class: 'awg.tektronix_awg70k.AWG70K'
        awg_ip_address: '111.111.111.5'
        awg_visa_address: 'TCPIP0::Barnypok::inst0::INSTR'
        default_sample_rate: 50e9  # in Samples/seconds
        pulsed_file_dir: 'C:\\Software\\pulsed_files'
        awg_ftp_path: 'C:/InetPub/ftproot' # this path cannot be retrieved otherwise.
        ftp_root_dir: 'C:/InetPub/ftproot' # this path cannot be retrieved otherwise.
#        ftp_login: 'xyxyxyxyx'
#        ftp_passwd: 'xxxxxxx'

#    mydummycounter:
#        module.Class: 'slow_counter_dummy.SlowCounterDummy'
#        clock_channel: '/Dev1/Ctr0'
#        clock_frequency: 100
#        counter_channel: '/Dev1/Ctr1'
#        photon_source: '/Dev1/PFI8'
#        photon_source2: '/Dev1/PFI9'
#        count_distribution: 'dark_bright_poisson'
#        remoteaccess: True

#    mydummyodmrcounter:
#        module.Class: 'odmr_counter_dummy.ODMRCounterDummy'
 #       clock_frequency: 100
  #      connect:
   #         fitlogic: 'fitlogic.fitlogic'

#    mydummyfastcounter:
 #       module.Class: 'fast_counter_dummy.FastCounterDummy'

    myfastcounter:
        module.Class: 'fastcomtec.fastcomtecmcs6.FastComtec'

#    remotefastcounter:
 #       module.Class: 'does_not_matter.DoesNotMatter'
  #      remote: 'rpyc://134.60.46.167:12345/myfastcounter'

#    mydummypulser:
 #       module.Class: 'pulser_dummy.PulserDummy'

#    mydummywavemeter:
 #       module.Class: 'wavemeter_dummy.WavemeterDummy'
  #      measurement_timing: 10

#    mydummyswitch1:
 #       module.Class: 'switches.switch_dummy.SwitchDummy'

#    mydummyswitch2:
 #       module.Class: 'switches.switch_dummy.SwitchDummy'

#    myspectrometer:
 #       module.Class: 'spectrometer.spectrometer_dummy.SpectrometerInterfaceDummy'
  #      connect:
   #         fitlogic: 'fitlogic.fitlogic'

#    motordummy:
 #       module.Class: 'motor.motor_dummy.MotorDummy'

#    magnetdummy:
 #       module.Class: 'magnet.magnet_dummy.MagnetDummy'

#    processdummy:
 #       module.Class: 'process_dummy.ProcessDummy'

    mymotor:
        module.Class: 'motor.motor_stage_pi.MotorStagePI'
        com_port_pi_xyz: 'ASRL3'
        pi_xyz_baud_rate: 9600
        pi_xyz_timeout: 250   #in ms
        pi_xyz_term_char: '\n'
        pi_first_axis_label: 'x'
        pi_second_axis_label: 'y'
        pi_third_axis_label: 'z'
        pi_first_axis_ID: '1'
        pi_second_axis_ID: '3'
        pi_third_axis_ID: '2'
        pi_first_min: -2e-1   #meter
        pi_first_max:  2e-1   #meter
        pi_second_min: -2e-1   #meter
        pi_second_max:  2e-1   #meter
        pi_third_min: -2e-1   #meter
        pi_third_max:  2e-1   #meter
        pi_first_axis_step: 1e-7   #meter
        pi_second_axis_step: 1e-7   #meter
        pi_third_axis_step: 1e-7   #meter
        vel_first_min: 1e-5   #m/s
        vel_first_max:  1e-2   #m/s
        vel_second_min: 1e-5   #m/s
        vel_second_max:  5e-2   #m/s
        vel_third_min: 5e-5   #m/s
        vel_third_max:  5e-2   #m/s
        vel_first_axis_step: 1e-5   #m/s
        vel_second_axis_step: 1e-5   #m/s
        vel_third_axis_step: 1e-5   #m/s

    myrotationalmotor:
        module.Class: 'motor.zaber_motor_rotation_stage.MotorRotationZaber'
        com_port_zaber: 'COM4'
        zaber_baud_rate: 9600
        zaber_timeout: 500     #in ms
        zaber_term_char: '\n'
        zaber_axis_label: 'phi'
        zaber_angle_min: 0   #degree
        zaber_angle_max:  360   #degree
        zaber_angle_step: 0.000234375   #degree
        zaber_velocity_max: 10   #degree/s
        zaber_velocity_min: 1e-3   #degree/s
        zaber_velocity_step: 1e-3   #degree/s
        zaber_micro_step_size: 0.000234375  #converts 'zaber-units' to deg
        zaber_speed_conversion: 9.375    #converts 'zaber-units' to deg/s




logic:
    pulsedmasterlogic:
        module.Class: 'pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic.sequencegenerator'

    kernellogic:
       module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
       remoteaccess: True

    sequencegeneratorlogic:
        module.Class: 'sequence_generator_logic.SequenceGeneratorLogic'
        pulsed_file_dir: 'C:\\Software\\pulsed_files'

    pulseextractionlogic:
        module.Class: 'pulse_extraction_logic.PulseExtractionLogic'


    pulseanalysislogic:
        module.Class: 'pulse_analysis_logic.PulseAnalysisLogic'

    pulsedmeasurementlogic:
        module.Class: 'pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fastcounter: 'myfastcounter.fastcounter'
            pulseanalysislogic: 'pulseanalysislogic.pulseanalysislogic'
            pulseextractionlogic: 'pulseextractionlogic.pulseextractionlogic'
            pulsegenerator: 'myawg.pulser'
            # scannerlogic: 'scannerlogic.scannerlogic'
            fitlogic: 'fitlogic.fitlogic'
            microwave: 'smiq.mwsourcesmiq'
            savelogic: 'savelogic.savelogic'
            # optimizer1: 'optimizerlogic.optimizerlogic'


    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'nicard.counter'
            # counter1: 'mydummycounter.counter'
            savelogic: 'savelogic.savelogic'

    gatedcounterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'nicard.counter'
            savelogic: 'savelogic.savelogic'

#    wavemeterloggerlogic:
 #       module.Class: 'wavemeter_logger_logic.WavemeterLoggerLogic'
  #      logic_acquisition_timing: 20
   #     logic_update_timing: 100
    #    connect:
     #       wavemeter1: 'mydummywavemeter.highhinessewavemeter'
      #      savelogic: 'savelogic.savelogic'
       #     counterlogic: 'counterlogic.counterlogic'

#    switchlogic:
 #       module.Class: 'switch_logic.SwitchLogic'
  #      connect:
   #         switch1: 'fpgaswitch.hardwareswitch'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'nicard.confocalscanner'
            # confocalscanner1: 'mydummyscanner.confocalscanner'
            savelogic: 'savelogic.savelogic'


#    simpledatalogic:
 #       module.Class: 'simple_data_logic.SimpleDataLogic'
  #      connect:
   #         simpledata: 'simpledatadummy.simple'

    pidlogic:
        module.Class: 'pid_logic.PIDLogic'
        connect:
            process: 'processdummy.dummy'
            control: 'processdummy.dummy'
            savelogic: 'savelogic.savelogic'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'nicard.confocalscanner'
            # confocalscanner1: 'mydummyscanner.confocalscanner'
            fitlogic: 'fitlogic.fitlogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic.scannerlogic'
            optimizer1: 'optimizerlogic.optimizerlogic'
            savelogic: 'savelogic.savelogic'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'nicard.odmrcounter'
            fitlogic: 'fitlogic.fitlogic'
            # microwave1: 'mykrowave.mwsourcedummy'
            microwave1: 'smiq.mwsourcesmiq'
            savelogic: 'savelogic.savelogic'
            taskrunner: 'tasklogic.runner'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]

    automationlogic:
        module.Class: 'automation.AutomationLogic'
        connect:
            taskrunner: 'tasklogic.runner'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: '/$HOME/'

#    spectrumlogic:
 #       module.Class: 'spectrum.SpectrumLogic'
  #      connect:
   #         spectrometer: 'myspectrometer.spec'
    #        savelogic: 'savelogic.savelogic'
     #       odmrlogic1: 'odmrlogic.odmrlogic'

### TO FIX

    magnet_logic:
        module.Class: 'magnet_logic.MagnetLogic'
        connect:
            magnetstage: 'magnet_motor_interfuse.magnetstage'
            optimizerlogic: 'optimizerlogic.optimizerlogic'
            counterlogic: 'counterlogic.counterlogic'
            odmrlogic: 'odmrlogic.odmrlogic'
            savelogic: 'savelogic.savelogic'
            scannerlogic: 'scannerlogic.scannerlogic'
            gatedcounterlogic: 'gatedcounterlogic.counterlogic'
            traceanalysis: 'trace_analysis_logic.traceanalysislogic1'
            sequencegeneratorlogic: 'sequencegeneratorlogic.sequencegenerator'

    magnet_motor_interfuse:
        module.Class: 'interfuse.magnet_motor_xyz_rot_interfuse.MagnetMotorXYZROTInterfuse'
        connect:
            motorstage_rot: 'myrotationalmotor.motorstage'
            motorstage_xyz: 'mymotor.motorstage'


    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'gatedcounterlogic.counterlogic'
            savelogic: 'savelogic.savelogic'
            fitlogic: 'fitlogic.fitlogic'

    qdplot:
        module.Class: 'qdplot_logic.QdplotLogic'
        connect:
            savelogic: 'savelogic.savelogic'

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic.counterlogic'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic.scannerlogic'
            savelogic: 'savelogic.savelogic'
            optimizerlogic1: 'optimizerlogic.optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanagerlogic.poimanagerlogic'
            confocallogic1: 'scannerlogic.scannerlogic'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic.odmrlogic'
            savelogic: 'savelogic.savelogic'

    #notebookgui:
    #    module.Class: 'notebook.notebookgui.NotebookWebView'

#    wavemeterlogger:
 #       module.Class: 'wavemeterlogger.wavemeterloggui.WavemeterLogGui'
  #      connect:
   #         wavemeterloggerlogic1: 'wavemeterloggerlogic.wavemeterloggerlogic'
    #        savelogic: 'savelogic.savelogic'

#    switches:
 #       module.Class: 'switcher.switchgui.SwitchGui'
  #      connect:
   #         switchlogic: 'switchlogic.switchlogic'

#    taskrunner:
 #       module.Class: 'taskrunner.taskgui.TaskGui'
  #      connect:
   #         tasklogic: 'tasklogic.runner'

#    automation:
 #       module.Class: 'automation.automationgui.AutomationGui'
  #      connect:
   #         automationlogic: 'automationlogic.automationlogic'

#    spectrometer:
 #       module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
  #      connect:
   #         spectrumlogic1: 'spectrumlogic.spectrumlogic'

    pulsedmeasurementgui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic.pulsedmasterlogic'
            savelogic: 'savelogic.savelogic'

#    simpledata:
 #       module.Class: 'simpledatagui.simpledatagui.SimpleDataGui'
  #      connect:
   #         simplelogic: 'simpledatalogic.simplelogic'

    magnet:
        module.Class: 'magnet.magnet_gui.MagnetGui'
        connect:
            magnetlogic1: 'magnet_logic.magnetlogic'
            savelogic: 'savelogic.savelogic'

#    gatedcounter:
 #       module.Class: 'gated_counter.gated_counter_gui.GatedCounterGui'
  #      connect:
   #         gatedcounterlogic1: 'gatedcounterlogic.counterlogic'
    #        traceanalysislogic1: 'trace_analysis_logic.traceanalysislogic1'

#    pidcontrol:
 #       module.Class: 'pidgui.pidgui.PIDGui'
  #      connect:
   #         pidlogic: 'pidlogic.pidlogic'

#    errortest:
 #       module.Class: 'testgui.TestGui'

#    qdplotter:
 #       module.Class: 'qdplotter.qdplottergui.QdplotterGui'
  #      connect:
   #         qdplotlogic1: 'qdplot.qdplotlogic'

