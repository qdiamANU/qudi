#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray', 'tasklogic']

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    microwavevaunix:
        module.Class: 'microwave.mw_source_vaunix.MicrowaveVaunix'

    #microwavesmiq:
    #    module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
     #   #gpib_address: '28'
     #   gpib_address: 'GPIB0::28::INSTR'
      #  gpib_timeout: 20

    mydummymicrowave:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        gpib_address: 'dummy'
        gpib_timeout: 20

    nicard:
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        clock_channel: '/Dev1/Ctr0'
        scanner_clock_channel: '/Dev1/Ctr2'
        photon_sources:
            - '/Dev1/PFI8'
        counter_channels:
            - '/Dev1/Ctr1'
        counter_ai_channels:  # optional
            - '/Dev1/AI1'
        scanner_counter_channels:
            - '/Dev1/Ctr3'
        scanner_ai_channels:  # optional
            - '/Dev1/AI0'
        scanner_ao_channels:
            - '/Dev1/AO0'
            - '/Dev1/AO1'
            - '/Dev1/AO2'
        scanner_position_ranges:
            - [0e-6, 513e-6]
            - [0e-6, 1037e-6]
            - [0e-6, 254.3e-6]
        scanner_voltage_ranges:
            - [-5, 5]
            - [-5, 5]
            - [0, 10]
        default_samples_number: 10
        default_clock_frequency: 100
        default_scanner_clock_frequency: 100
        gate_in_channel: '/Dev1/PFI9'
        counting_edge_rising: True
        odmr_trigger_channel: '/Dev1/PFI5'


    #mydummyscanner:
    #    module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
    #    clock_frequency: 100
    #    connect:
    #        fitlogic: 'fitlogic'

    #simpledatadummy:
    #    module.Class: 'simple_data_dummy.SimpleDummy'

    #mydummyscanner:
    #   module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
    #   clock_frequency: 100
    #connect:
    #       fitlogic: 'fitlogic'

    #mydummycounter:
    #    module.Class: 'slow_counter_dummy.SlowCounterDummy'
    #    source_channels: 4
    #    clock_frequency: 100
    #    count_distribution: 'dark_bright_poisson'
    #    remoteaccess: True

    #mydummyodmrcounter:
    #    module.Class: 'odmr_counter_dummy.ODMRCounterDummy'
    #    clock_frequency: 100
    #    number_of_channels: 3
    #    connect:
    #        fitlogic: 'fitlogic'

    myslowcounter:
        module.Class: 'swabian_instruments.timetagger_slow_counter.TimeTaggerSlowCounter'
        channel_apd_0: 0
        channel_odmr_trigger: 1
        sum_channels: False

    myfastcounter:
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        timetagger_channel_apd_0: 0
        #timetagger_channel_apd_1: 1
        timetagger_channel_detect: 1
        #timetagger_channel_sequence: 3
        timetagger_sum_channels: False

    mydummyfastcounter:
        module.Class: 'fast_counter_dummy.FastCounterDummy'
       #choose_trace: True
        gated: False


    mypulser:
        module.Class: 'awg.spectrum_awg_M4i6631x8_test4.AWGSpectrumM4i6631x8'
        pulsed_file_dir: 'C:\\qudi_pulsed_files'
        apd_gate_channel:

    mydummypulser:
        module.Class: 'pulser_dummy.PulserDummy'

    #mydummywavemeter:
    #    module.Class: 'wavemeter_dummy.WavemeterDummy'
    #    measurement_timing: 10

    #mydummyswitch1:
    #    module.Class: 'switches.switch_dummy.SwitchDummy'

    #mydummyswitch2:
    #    module.Class: 'switches.switch_dummy.SwitchDummy'

    #myspectrometer:
    #    module.Class: 'spectrometer.spectrometer_dummy.SpectrometerInterfaceDummy'
    #    connect:
    #        fitlogic: 'fitlogic'


    motor_stage_pi:
        module.Class: 'motor.piezo_stage_pi_usb_gcs2.PiezoStagePI'
        axis_labels:
            - x
            - z
            - y
        x:
            channel: '1'
            constraints:
                pos_min: -13e-3
                pos_max: 13e-3
        y:
            channel: '2'
            constraints:
                pos_min: -13e-3
                pos_max: 13e-3
        z:
            channel: '3'
            constraints:
                pos_min: -13e-3
                pos_max: 13e-3

    #motordummy:
    #    module.Class: 'motor.motor_dummy.MotorDummy'

    #motor_stage_pi:
    #    module.Class: 'motor.motor_stage_pi.MotorStagePI'
    #magnetdummy:
    #    module.Class: 'magnet.magnet_dummy.MagnetDummy'

    #processdummy:
    #    module.Class: 'process_dummy.ProcessDummy'

    laserdummy:
        module.Class: 'laser.simple_laser_dummy.SimpleLaserDummy'

    laserawgdigital:
        module.Class: 'laser.laser_awg_digital.Laser_AWG_Digital'

logic:
    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    #simpledatalogic:
    #    module.Class: 'simple_data_logic.SimpleDataLogic'
    #    connect:
    #        simpledata: 'simpledatadummy'

    softpid:
        module.Class: 'software_pid_controller.SoftPIDController'
        connect:
            process: 'processdummy'
            control: 'processdummy'

    pidlogic:
        module.Class: 'pid_logic.PIDLogic'
        connect:
            controller: 'softpid'
            savelogic: 'savelogic'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        direct_write: False
        activation_config_name: 'all'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        assets_storage_path: 'C:\qudi_stored_pulsed_assets'
        pulsed_file_dir: 'C:\\qudi_pulsed_files'
        #prepared_methods: ['generate_laser_on','generate_rabi','generate_pulsedodmr','generate_xy8']
        #default_waveform_format: 'npy'
        # Not properly implemented yet
        #overhead_bytes: 4294967296
        #additional_methods_dir: 'C:\\Custom_dir\\Methods' optional
        connect:
            pulsegenerator: 'mypulser'

    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            #fastcounter: 'mydummyfastcounter'
            fastcounter: 'myfastcounter'
            pulsegenerator: 'mypulser'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            #microwave: 'mydummymicrowave'
            microwave: 'microwavevaunix'

    singleshotlogic:
        module.Class: 'single_shot_logic.SingleShotLogic'
        connect:
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'
            pulsedmasterlogic: 'pulsedmasterlogic'
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            singleshotreadoutcounter: 'fastcounter_singleshot_interfuse'
            #singleshotreadoutcounter: 'myfastcounter'


    fastcounter_singleshot_interfuse:
        module.Class: 'interfuse.fasttimetagger_ssrcounter_interfuse.FastTimeTaggerSSRCounterInterfuse'
        connect:
            fastcounter: 'myfastcounter'
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'myslowcounter'
            #counter1: 'nicard'
            savelogic: 'savelogic'

    gatedcounterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'myslowcounter'
            savelogic: 'savelogic'

    wavemeterloggerlogic:
        module.Class: 'wavemeter_logger_logic.WavemeterLoggerLogic'
        logic_acquisition_timing: 20
        logic_update_timing: 100
        connect:
            wavemeter1: 'mydummywavemeter'
            savelogic: 'savelogic'
            counterlogic: 'counterlogic'
            fitlogic: 'fitlogic'

    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch1: 'mydummyswitch1'
            switch2: 'mydummyswitch2'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            savelogic: 'savelogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'nicard'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'nicard'
            fitlogic: 'fitlogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimizer1: 'optimizerlogic'
            savelogic: 'savelogic'

    odmrlogic_lowfield:
        module.Class: 'odmr_logic.ODMRLogic'
        scanmode: 'LIST'
        connect:
            #odmrcounter: 'myslowcounter'
            odmrcounter: 'nicard'
            fitlogic: 'fitlogic'
            #microwave1: 'microwavesmiq'
            microwave1: 'mydummymicrowave'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'

    odmrlogic_highfield:
        module.Class: 'odmr_logic.ODMRLogic'
        scanmode: 'LIST'
        connect:
            #odmrcounter: 'myslowcounter'
            odmrcounter: 'nicard'
            fitlogic: 'fitlogic'
            #microwave1: 'microwave_awg_interfuse'
            microwave1: 'mydummymicrowave'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'

    # this interfuse enables odmr if hardware trigger is not available or if
    # the counter has only two channels:
    # odmr_counter_microwave_interfuse:
    #    module.Class: 'interfuse.odmr_counter_microwave_interfuse.ODMRCounterMicrowaveInterfuse'
    #    connect:
    #        slowcounter: 'nicard'
    #        microwave: 'mykrowave'

    # this oder logic runs now with the interfuse
    # odmrlogic2:
    #    module.Class: 'odmr_logic.ODMRLogic'
    #    connect:
    #        odmrcounter: 'odmr_counter_microwave_interfuse'
    #        fitlogic: 'fitlogic'
    #        microwave1: 'odmr_counter_microwave_interfuse'
    #        savelogic: 'savelogic'
    #        taskrunner: 'tasklogic'
    #    scanmode: 'LIST'


    # laserscannerlogic:
    #    module.Class: 'laser_scanner_logic.LaserScannerLogic'
    #    connect:
    #        confocalscanner1: 'mydummyscanner'
    #        savelogic: 'savelogic'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]

    automationlogic:
        module.Class: 'automation.AutomationLogic'
        connect:
            taskrunner: 'tasklogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True

    spectrumlogic:
        module.Class: 'spectrum.SpectrumLogic'
        connect:
            spectrometer: 'myspectrometer'
            savelogic: 'savelogic'
            odmrlogic1: 'odmrlogic'

    magnet_logic:
        module.Class: 'magnet_logic.MagnetLogic'
        connect:
            magnetstage: 'magnet_motor_interfuse'
            optimizerlogic: 'optimizerlogic'
            counterlogic: 'counterlogic'
            odmrlogic: 'odmrlogic_highfield'
            savelogic: 'savelogic'
            scannerlogic: 'scannerlogic'
            traceanalysis: 'trace_analysis_logic'
            gatedcounterlogic: 'gatedcounterlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    magnet_motor_interfuse:
        module.Class: 'interfuse.magnet_motor_interfuse.MagnetMotorInterfuse'
        connect:
            #motorstage: 'motordummy'
             motorstage: 'motor_stage_pi'

    microwave_awg_interfuse:
        module.Class: 'interfuse.microwave_awg_interfuse.MicrowaveAwgInterfuse'
        connect:
            microwave: 'microwave'
            awg: 'mypulser'

    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'gatedcounterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    qdplotlogic:
        module.Class: 'qdplot_logic.QdplotLogic'
        connect:
            savelogic: 'savelogic'

    nuopslogic:
        module.Class: 'nuclear_operations_logic.NuclearOperationsLogic'
        connect:
            sequencegenerationlogic: 'sequencegeneratorlogic'
            traceanalysislogic: 'trace_analysis_logic'
            gatedcounterlogic: 'gatedcounterlogic'
            odmrlogic: 'odmrlogic_highfield'
            optimizerlogic: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
            savelogic: 'savelogic'

    laserlogic:
        module.Class: 'laser_logic.LaserLogic'
        connect:
            laser: 'laser_awg_interfuse'

    laserlogic2:
        module.Class: 'laser_logic.LaserLogic'
        connect:
            laser: 'laserawgdigital'

    laser_awg_interfuse:
        module.Class: 'interfuse.laser_awg_interfuse.LaserAWGInterfuse'
        connect:
            awg: 'mypulser'

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'

    odmr_lowfield:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic_lowfield'
            savelogic: 'savelogic'

    odmr_highfield:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic_highfield'
            savelogic: 'savelogic'

    nuclearops:
        module.Class: 'nuclear_operations.nuclear_operations.NuclearOperationsGui'
        connect:
            nuclearoperationslogic: 'nuopslogic'
            savelogic: 'savelogic'


    singleshotgui:
        module.Class: 'single_shot.single_shot_gui.SingleShotGui'
        connect:
            singleshotlogic: 'singleshotlogic'

    magnet:
        module.Class: 'magnet.magnet_gui.MagnetGui'
        connect:
            magnetlogic1: 'magnet_logic'
            savelogic: 'savelogic'

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanagerlogic'
            confocallogic1: 'scannerlogic'

    wavemeterlogger:
        module.Class: 'wavemeterlogger.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic1: 'wavemeterloggerlogic'
            savelogic: 'savelogic'

    switches:
        module.Class: 'switcher.switchgui.SwitchGui'
        connect:
            switchlogic: 'switchlogic'

    taskrunner:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic'

    automation:
        module.Class: 'automation.automationgui.AutomationGui'
        connect:
            automationlogic: 'automationlogic'

    spectrometer:
        module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
        connect:
            spectrumlogic1: 'spectrumlogic'

    simpledata:
        module.Class: 'simpledatagui.simpledatagui.SimpleDataGui'
        connect:
            simplelogic: 'simpledatalogic'

    gatedcounter:
        module.Class: 'gated_counter.gated_counter_gui.GatedCounterGui'
        connect:
            gatedcounterlogic1: 'gatedcounterlogic'
            traceanalysislogic1: 'trace_analysis_logic'

    pidcontrol:
        module.Class: 'pidgui.pidgui.PIDGui'
        connect:
            pidlogic: 'pidlogic'

    errortest:
        module.Class: 'testgui.TestGui'
        text: 'Random text from config'
        error: 'This config is required!'

    qdplotter:
        module.Class: 'qdplotter.qdplottergui.QdplotterGui'
        connect:
            qdplotlogic1: 'qdplotlogic'

    laser:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic'

    laser2:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic2'

    laserscanner:
        module.Class: 'laserscanner.laserscannergui.VoltScanGui'
        connect:
            voltagescannerlogic1: 'laserscannerlogic'
            savelogic: 'savelogic'

    # Gui to test the dummy counting
    odmrgui_program_trigger:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic2'
            savelogic: 'savelogic'
